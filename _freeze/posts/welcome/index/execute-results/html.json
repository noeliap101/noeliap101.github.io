{
  "hash": "15ab9c90da63e2ea854226f534839fc3",
  "result": {
    "markdown": "---\ntitle: \"Welcome To My Blog! First\"\n#format:\n # html:\n  #  code-fold: true\nauthor: \"Noelia Paz\"\ndate: \"2023\"\ncategories: [news]\n---\n\n## My Informational First Blog Post ##\n\n![](features_of_scala.png)\n\nWhy would you want to learn `Scala`?\n\nWhy don't you just continue with the same languages you've been using for all your programming?\n\nThe goal of this is to encourage you to consider learning the Scala Programming language\n\n### Why Scala For Me ###\nAs I have been researching on why Scala would be a beneficial tool for you to use, I have learned that larger companies use this as they have more benefits than others.\n\nI went to a Disney informational session in my third year in college to learn about what they are looking for for programming candidates. \nThe speaker said that if we want to stand out among other candidates, Scala is the perfect lanaguge to learn. He did say that there is a huge learning curve.   \n\n\n### Companies That Use Scala and Examples of their projects with Pictures ###\nScala is used a lot by companies involved with Big Data (because they use Spark).\n\n\n~`Apple`\nScala was the top 4th used programming language used in their company. In fact, senior data scientists used Scala in Apple more in comparison to other positions. \n\nIt was relevant in their senior data science positions.\n\n\n~`Disney Streaming`\nSoftware Engineer\n![](disney_software.png)\n\nSenior Data Scientist\n![](disney_data.png)\n\nA man, Manpreet Singh, looked at all the job postings for Disney in 2021, and he found the most popular programming languages were: Scala, Python, SQL, R.\n\nScala was at the top.\n\nhttps://preettheman.medium.com/these-are-the-programming-languages-disney-uses-70c01cbf06be\n\n~`Twitter`\n\nThis company is one of the commonly known companies to use Scala. They were also the earliest to use it, back in 2009. They did use Ruby, another programming language _________,  but Twitter found out that Ruby lacks reliable, high performance code. \n\nScala has been beneficial and faster because it is less typing, and leads to less reading.\n\nIn fact, Twitter has started series for their programmers to be experienced in Scala \n\n![](twitter_school_scala.png)\n\nhttps://www.artima.com/articles/twitter-on-scala\nhttps://twitter.github.io/scala_school/\n\n~`Morgan Stanley`\nIt is a given that the industries that are wanting tech people are banks and financial instituations. Morgan Stanley is at the top of the banks that use Scala.\n\n\"Morgan Stanley has one of the worldâ€™s largest Scala codebases in production\"\n\nhttps://skillsmatter.com/partners/499-morgan-stanley\n\n~`The Guardian`\n\nWe've found that Scala has enabled us to deliver things faster with less code. It's reinvigorated the team. We'll continue to use the right tool for the job whether that be Scala, Python, .NET, PHP or Bash.\nIn the last six months, all of the new JVM-based projects have used Scala and none have selected Java.\n\nhttps://www.infoq.com/articles/guardian_scala/\n\n### What Type of Projects is Scala Known For? 3 I will Focus On in Further Posts ###\n~Big Data Processing, Data Science and Machine Learning, Financial Services\n\n\n\n## Basics of Scala Against Python ##\n\n\n### Simple Expression Example ###\n\n#### Scala #####\n\n```{scala}\n\nobject ScalaLoopExample {\n  def main(args: Array[String]): Unit = {\n    for (i <- 1 to 5) {\n      println(s\"Scala loop iteration: $i\")\n    }\n  }\n}\n```\n\n\nargs: Array[String] is the method parameter declaration. It's specifying that the main method takes an array of strings as its input.\n\n\n##### Python #####\n\nFirst Example:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfor i in range(1, 6):\n    print(f\"Python loop iteration: {i}\")\n```\n:::\n\n\nSecond:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef simple_loop():\n    # Function\n    for i in range(1, 6):\n        print(f\"Python loop iteration: {i}\")\n\n# Call\nsimple_loop()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPython loop iteration: 1\nPython loop iteration: 2\nPython loop iteration: 3\nPython loop iteration: 4\nPython loop iteration: 5\n```\n:::\n:::\n\n\nIn Scala, the for loop is more expressive and can be used for a variety of iteration scenarios, including iterating over collections and applying filters.\n\nIn Python, the for loop is straightforward and commonly used for iterating over sequences.\n\n\n\n### Variables Example ###\n\n#### Scala #####\n\n\n```{Scala}\nobject ScalaVariablesExample {\n  def main(args: Array[String]): Unit = {\n    #variable with the keyword var\n    var message: String = \"Hi, all!\"\n\n    #Print the initial value\n    println(message)\n  }\n}\n\n```\n\nvar is used to declare a mutable variable named message of type String.\n\n#### Python #####\n\n\n```{Python}\n\ndef variable_example():\n    # Defining the variable\n    message = \"Hi to all!\"\n\n    # Print\n    print(message)\n\n# Calling\nvariable_example()\n\n```\n\n\n### Simple data analytics code  ###\n\n\n#### Scala #####\n\n\n\n```{Scala}\n     \n      * Calculate the average of all columns\n      val avgDF = df.agg(avg(df.columns.map(col): _*))\n\n      * Show the average values\n      println(\"\\nAverage Values:\")\n      avgDF.show()\n\n\n```\n\n\n\n#### Python #####\n\n```{Python}\n    # Calculate the average of all columns\n    avg_series = df.mean()\n\n    #printing it\n    print(avg_series)\n\n```\n\n\n### Concatenating Arrays ###\n\n#### Scala #####\n\n\n```{Scala}\nobject ConcatenateArraysExample {\n  def main(args: Array[String]): Unit = {\n    # Define two arrays\n    val array1 = Array(1, 2, 3)\n    val array2 = Array(4, 5, 6)\n\n    # Concatenate arrays using the ++ operator\n    val concatenatedArray1 = array1 ++ array2\n\n    # Concatenate arrays using the concat method\n    val concatenatedArray2 = array1.concat(array2)\n\n    # Print the results\n    println(\"Concatenated Array 1: \" + concatenatedArray1.mkString(\", \"))\n    println(\"Concatenated Array 2: \" + concatenatedArray2.mkString(\", \"))\n  }\n}\n```\n\n\n#### Python #####\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef concatenate_arrays(*arrays):\n    # Using the + operator for concatenation\n    concatenated_array = []\n    for arr in arrays:\n        concatenated_array += arr\n\n    return concatenated_array\n\ndef main():\n    # Define several arrays\n    array1 = [1, 2, 3]\n    array2 = [4, 5, 6]\n    array3 = [\"A\", \"B\", \"C\"]\n\n    # Concatenate arrays using the custom function\n    concatenated_array = concatenate_arrays(array1, array2, array3)\n\n    # Print the result\n    print(\"Concatenated Array:\", concatenated_array)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConcatenated Array: [1, 2, 3, 4, 5, 6, 'A', 'B', 'C']\n```\n:::\n:::\n\n\n~Key Points of Comparison\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}