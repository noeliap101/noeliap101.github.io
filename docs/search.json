[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "noeliap101.github.io",
    "section": "",
    "text": "My Second Blog Post\n\n\n\n\n\n\n\n\n\n\n\n\nDec 1, 2023\n\n\nNoelia Paz\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog! First Post\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nDec 31, 2022\n\n\nNoelia Paz\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog! First Post",
    "section": "",
    "text": "Why would you want to learn Scala?\nWhy don’t you just continue with the same languages you’ve been using for all your programming?\nThe goal of this is to encourage you to consider learning the Scala Programming language My audience is targeted towards college students"
  },
  {
    "objectID": "posts/welcome/index.html#my-informational-first-blog-post-example-hereeeee-blah-blah",
    "href": "posts/welcome/index.html#my-informational-first-blog-post-example-hereeeee-blah-blah",
    "title": "Welcome To My Blog! First Post",
    "section": "",
    "text": "Why would you want to learn Scala?\nWhy don’t you just continue with the same languages you’ve been using for all your programming?\nThe goal of this is to encourage you to consider learning the Scala Programming language\n\n\nAs I have been researching on why Scala would be a beneficial tool for you to use, I have learned that larger companies use this as they have more benefits than others.\nI went to a Disney informational session in my third year in college to learn about what they are looking for for programming candidates. The speaker said that if we want to stand out among other candidates, Scala is the perfect lanaguge to learn. He did say that there is a huge learning curve.\n\n\n\nScala is used a lot by companies involved with Big Data (because they use Spark).\n~Apple Scala was the top 4th used programming language used in their company. In fact, senior data scientists used Scala in Apple more in comparison to other positions.\nIt was relevant in their senior data science positions.\n~Disney Streaming Software Engineer \nSenior Data Scientist \nA man, Manpreet Singh, looked at all the job postings for Disney in 2021, and he found the most popular programming languages were: Scala, Python, SQL, R.\nScala was at the top.\nhttps://preettheman.medium.com/these-are-the-programming-languages-disney-uses-70c01cbf06be\n~Twitter\nThis company is one of the commonly known companies to use Scala. They were also the earliest to use it, back in 2009. They did use Ruby, another programming language _________, but Twitter found out that Ruby lacks reliable, high performance code.\nScala has been beneficial and faster because it is less typing, and leads to less reading.\nIn fact, Twitter has started series for their programmers to be experienced in Scala\n\nhttps://www.artima.com/articles/twitter-on-scala https://twitter.github.io/scala_school/\n~Morgan Stanley It is a given that the industries that are wanting tech people are banks and financial instituations. Morgan Stanley is at the top of the banks that use Scala.\n“Morgan Stanley has one of the world’s largest Scala codebases in production”\nhttps://skillsmatter.com/partners/499-morgan-stanley\n~The Guardian\nWe’ve found that Scala has enabled us to deliver things faster with less code. It’s reinvigorated the team. We’ll continue to use the right tool for the job whether that be Scala, Python, .NET, PHP or Bash. In the last six months, all of the new JVM-based projects have used Scala and none have selected Java.\nhttps://www.infoq.com/articles/guardian_scala/\n\n\n\n~Big Data Processing, Data Science and Machine Learning, Financial Services"
  },
  {
    "objectID": "posts/welcome/index.html#basics-of-scala-against-python",
    "href": "posts/welcome/index.html#basics-of-scala-against-python",
    "title": "Welcome To My Blog! First Post",
    "section": "Basics of Scala Against Python",
    "text": "Basics of Scala Against Python\n\nSimple Expression Example\n\nScala\n\nobject ScalaLoopExample {\n  def main(args: Array[String]): Unit = {\n    for (i &lt;- 1 to 5) {\n      println(s\"Scala loop iteration: $i\")\n    }\n  }\n}\nargs: Array[String] is the method parameter declaration. It’s specifying that the main method takes an array of strings as its input.\n\nPython\nFirst Example:\n\nfor i in range(1, 6):\n    print(f\"Python loop iteration: {i}\")\n\nSecond:\n\ndef simple_loop():\n    # Function\n    for i in range(1, 6):\n        print(f\"Python loop iteration: {i}\")\n\n# Call\nsimple_loop()\n\nPython loop iteration: 1\nPython loop iteration: 2\nPython loop iteration: 3\nPython loop iteration: 4\nPython loop iteration: 5\n\n\nIn Scala, the for loop is more expressive and can be used for a variety of iteration scenarios, including iterating over collections and applying filters.\nIn Python, the for loop is straightforward and commonly used for iterating over sequences.\n\n\n\n\nVariables Example\n\nScala\nobject ScalaVariablesExample {\n  def main(args: Array[String]): Unit = {\n    #variable with the keyword var\n    var message: String = \"Hi, all!\"\n\n    #Print the initial value\n    println(message)\n  }\n}\n\nvar is used to declare a mutable variable named message of type String.\n\n\nPython\n\ndef variable_example():\n    # Defining the variable\n    message = \"Hi to all!\"\n\n    # Print\n    print(message)\n\n# Calling\nvariable_example()\n\n\n\n\nSimple data analytics code\n\nScala\n     \n      * Calculate the average of all columns\n      val avgDF = df.agg(avg(df.columns.map(col): _*))\n\n      * Show the average values\n      println(\"\\nAverage Values:\")\n      avgDF.show()\n\n\n\n\nPython\n    # Calculate the average of all columns\n    avg_series = df.mean()\n\n    #printing it\n    print(avg_series)\n\n\n\n\nConcatenating Arrays\n\nScala\nobject ConcatenateArraysExample {\n  def main(args: Array[String]): Unit = {\n    # Define two arrays\n    val array1 = Array(1, 2, 3)\n    val array2 = Array(4, 5, 6)\n\n    # Concatenate arrays using the ++ operator\n    val concatenatedArray1 = array1 ++ array2\n\n    # Concatenate arrays using the concat method\n    val concatenatedArray2 = array1.concat(array2)\n\n    # Print the results\n    println(\"Concatenated Array 1: \" + concatenatedArray1.mkString(\", \"))\n    println(\"Concatenated Array 2: \" + concatenatedArray2.mkString(\", \"))\n  }\n}\n\n\nPython\n\ndef concatenate_arrays(*arrays):\n    # Using the + operator for concatenation\n    concatenated_array = []\n    for arr in arrays:\n        concatenated_array += arr\n\n    return concatenated_array\n\ndef main():\n    # Define several arrays\n    array1 = [1, 2, 3]\n    array2 = [4, 5, 6]\n    array3 = [\"A\", \"B\", \"C\"]\n\n    # Concatenate arrays using the custom function\n    concatenated_array = concatenate_arrays(array1, array2, array3)\n\n    # Print the result\n    print(\"Concatenated Array:\", concatenated_array)\n\nif __name__ == \"__main__\":\n    main()\n\nConcatenated Array: [1, 2, 3, 4, 5, 6, 'A', 'B', 'C']\n\n\n~Key Points of Comparison"
  },
  {
    "objectID": "posts/my-second-blog-post/index.html",
    "href": "posts/my-second-blog-post/index.html",
    "title": "My Second Blog Post",
    "section": "",
    "text": "Let’s learn about class and object! Did you know that Scala focuses on object oriented programming? It is unique to its language, and that’s what it focuses on:\nThe class is the instruction, and the object is the thing you build based on those instructions.\nA recipe (class) to make cookies (Objects).\n\n\n\nLet’s go over functional and imperative programming!\n\n\n\ncode is written in such a way that existing variables are not modified while the program is running.\nValues are specified as function parameters, and output is generated based on their parameters.\nFunctions are required to return the same output when specifying the same parameters on each call.\n\n\n\n\n\nIt’s normal to have mutable variables and classes that keep internal states\nThis can lead to both subtle and hard-to-find bugs, especially where multiple threads try to alter a variable at the same time.\nUsed in Java! [standard POJO has variables that can be freely changed by calling the setter methods]\n\nNow, traditional object oriented programming in Scala!\n\nFirst, define the class\nThen, add variables\nThen, add the operations you need to perform.\nAdd the method\nThen print the output passing arguments to it\n\n\n\nTo let the add method return different values, different parameters will have to be passed to the add method.\nFunctional programming is a popular choice for programs that use multiple threads.\nMethods cannot alter the state of data structures that are used in multiple threads, it’s often much more safe than using imperative code.\nRequires a different mindset from the developer\n\n\n\n\n\nstatically typed language, you have to declare variables before you use them.\n\n\n\nA mutable variable has been declared:\nIt can be used to store instances of the same type or types\nOr can be upcast to that type\n\n\nUpcasting: moving from child to parent type\nJava.lang.object: common object used in java, and under ‘Any’ type in Scala.\n\n\nAble to line for variable j. -A string type can be upcast to java.lang.Object\nThe j variable will happily store a reference to the hello world string.\n\nWhat Cannot Happen - Giving a string type to the i variable from up above - Strings cannot be upcasted to an Int instance"
  },
  {
    "objectID": "posts/my-second-blog-post/index.html#my-second-blog-post",
    "href": "posts/my-second-blog-post/index.html#my-second-blog-post",
    "title": "My Second Blog Post",
    "section": "",
    "text": "Let’s learn about class and object! Did you know that Scala focuses on object oriented programming? It is unique to its language, and that’s what it focuses on:\nThe class is the instruction, and the object is the thing you build based on those instructions.\nA recipe (class) to make cookies (Objects).\n\n\n\nLet’s go over functional and imperative programming!\n\n\n\ncode is written in such a way that existing variables are not modified while the program is running.\nValues are specified as function parameters, and output is generated based on their parameters.\nFunctions are required to return the same output when specifying the same parameters on each call.\n\n\n\n\n\nIt’s normal to have mutable variables and classes that keep internal states\nThis can lead to both subtle and hard-to-find bugs, especially where multiple threads try to alter a variable at the same time.\nUsed in Java! [standard POJO has variables that can be freely changed by calling the setter methods]\n\nNow, traditional object oriented programming in Scala!\n\nFirst, define the class\nThen, add variables\nThen, add the operations you need to perform.\nAdd the method\nThen print the output passing arguments to it\n\n\n\nTo let the add method return different values, different parameters will have to be passed to the add method.\nFunctional programming is a popular choice for programs that use multiple threads.\nMethods cannot alter the state of data structures that are used in multiple threads, it’s often much more safe than using imperative code.\nRequires a different mindset from the developer\n\n\n\n\n\nstatically typed language, you have to declare variables before you use them.\n\n\n\nA mutable variable has been declared:\nIt can be used to store instances of the same type or types\nOr can be upcast to that type\n\n\nUpcasting: moving from child to parent type\nJava.lang.object: common object used in java, and under ‘Any’ type in Scala.\n\n\nAble to line for variable j. -A string type can be upcast to java.lang.Object\nThe j variable will happily store a reference to the hello world string.\n\nWhat Cannot Happen - Giving a string type to the i variable from up above - Strings cannot be upcasted to an Int instance"
  },
  {
    "objectID": "posts/my-second-blog-post/index.html#mutuable-and-immutable-variables",
    "href": "posts/my-second-blog-post/index.html#mutuable-and-immutable-variables",
    "title": "My Second Blog Post",
    "section": "Mutuable and Immutable Variables",
    "text": "Mutuable and Immutable Variables\nClasses\nAny is Scala’s parent class\n\nSubclasses\nAnyRef:\n\nused by reverence variable\nmethods; equals, hashcode, finalize\n\nAnyVal:\n\nused by value classes\ncannpt create primitive values\n\nPrimitive values: These wrapper classes are subclasses of the AnyVal class.\nScala wrapper: subclasses implement all the binary operators that you use for calculations"
  }
]